// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSlotsForFacilitiesParams creates a new GetSlotsForFacilitiesParams object
// with the default values initialized.
func NewGetSlotsForFacilitiesParams() GetSlotsForFacilitiesParams {

	var (
		// initialize parameters with default values

		pageNumberDefault = int64(0)
		pageSizeDefault   = int64(0)
	)

	return GetSlotsForFacilitiesParams{
		PageNumber: &pageNumberDefault,

		PageSize: &pageSizeDefault,
	}
}

// GetSlotsForFacilitiesParams contains all the bound params for the get slots for facilities operation
// typically these are obtained from a http.Request
//
// swagger:parameters getSlotsForFacilities
type GetSlotsForFacilitiesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	FacilityID *string
	/*
	  In: query
	  Default: 0
	*/
	PageNumber *int64
	/*
	  In: query
	  Default: 0
	*/
	PageSize *int64
	/*
	  In: query
	*/
	ProgramID *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSlotsForFacilitiesParams() beforehand.
func (o *GetSlotsForFacilitiesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFacilityID, qhkFacilityID, _ := qs.GetOK("facilityId")
	if err := o.bindFacilityID(qFacilityID, qhkFacilityID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageNumber, qhkPageNumber, _ := qs.GetOK("pageNumber")
	if err := o.bindPageNumber(qPageNumber, qhkPageNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qProgramID, qhkProgramID, _ := qs.GetOK("programId")
	if err := o.bindProgramID(qProgramID, qhkProgramID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFacilityID binds and validates parameter FacilityID from query.
func (o *GetSlotsForFacilitiesParams) bindFacilityID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.FacilityID = &raw

	return nil
}

// bindPageNumber binds and validates parameter PageNumber from query.
func (o *GetSlotsForFacilitiesParams) bindPageNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSlotsForFacilitiesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageNumber", "query", "int64", raw)
	}
	o.PageNumber = &value

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetSlotsForFacilitiesParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSlotsForFacilitiesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	return nil
}

// bindProgramID binds and validates parameter ProgramID from query.
func (o *GetSlotsForFacilitiesParams) bindProgramID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ProgramID = &raw

	return nil
}
