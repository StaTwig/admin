// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/divoc/registration-api/swagger_gen/models"
)

// RegisterRecipientToProgramHandlerFunc turns a function with the right signature into a register recipient to program handler
type RegisterRecipientToProgramHandlerFunc func(RegisterRecipientToProgramParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterRecipientToProgramHandlerFunc) Handle(params RegisterRecipientToProgramParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// RegisterRecipientToProgramHandler interface for that can handle valid register recipient to program params
type RegisterRecipientToProgramHandler interface {
	Handle(RegisterRecipientToProgramParams, *models.JWTClaimBody) middleware.Responder
}

// NewRegisterRecipientToProgram creates a new http.Handler for the register recipient to program operation
func NewRegisterRecipientToProgram(ctx *middleware.Context, handler RegisterRecipientToProgramHandler) *RegisterRecipientToProgram {
	return &RegisterRecipientToProgram{Context: ctx, Handler: handler}
}

/*RegisterRecipientToProgram swagger:route POST /recipient/{enrollment_osid}/program/{program_id}/ registerRecipientToProgram

register recipient to program

*/
type RegisterRecipientToProgram struct {
	Context *middleware.Context
	Handler RegisterRecipientToProgramHandler
}

func (o *RegisterRecipientToProgram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterRecipientToProgramParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterRecipientToProgramBody register recipient to program body
//
// swagger:model RegisterRecipientToProgramBody
type RegisterRecipientToProgramBody struct {

	// comorbidities
	Comorbidities []string `json:"comorbidities"`
}

// Validate validates this register recipient to program body
func (o *RegisterRecipientToProgramBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterRecipientToProgramBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterRecipientToProgramBody) UnmarshalBinary(b []byte) error {
	var res RegisterRecipientToProgramBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
