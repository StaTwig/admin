// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/registration-api/swagger_gen/models"
)

// DeleteRecipientProgramHandlerFunc turns a function with the right signature into a delete recipient program handler
type DeleteRecipientProgramHandlerFunc func(DeleteRecipientProgramParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRecipientProgramHandlerFunc) Handle(params DeleteRecipientProgramParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// DeleteRecipientProgramHandler interface for that can handle valid delete recipient program params
type DeleteRecipientProgramHandler interface {
	Handle(DeleteRecipientProgramParams, *models.JWTClaimBody) middleware.Responder
}

// NewDeleteRecipientProgram creates a new http.Handler for the delete recipient program operation
func NewDeleteRecipientProgram(ctx *middleware.Context, handler DeleteRecipientProgramHandler) *DeleteRecipientProgram {
	return &DeleteRecipientProgram{Context: ctx, Handler: handler}
}

/*DeleteRecipientProgram swagger:route DELETE /recipient/{enrollment_osid}/program/{program_id}/ deleteRecipientProgram

Delete the recipient program

*/
type DeleteRecipientProgram struct {
	Context *middleware.Context
	Handler DeleteRecipientProgramHandler
}

func (o *DeleteRecipientProgram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteRecipientProgramParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
