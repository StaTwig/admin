// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetBeneficiariesParams creates a new GetBeneficiariesParams object
// no default values defined in spec.
func NewGetBeneficiariesParams() GetBeneficiariesParams {

	return GetBeneficiariesParams{}
}

// GetBeneficiariesParams contains all the bound params for the get beneficiaries operation
// typically these are obtained from a http.Request
//
// swagger:parameters getBeneficiaries
type GetBeneficiariesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*End Date
	  Required: true
	  In: query
	*/
	EndDate strfmt.Date
	/*Program Id
	  Required: true
	  In: query
	*/
	ProgramID string
	/*Start Date
	  Required: true
	  In: query
	*/
	StartDate strfmt.Date
	/*Facility Type
	  Required: true
	  In: query
	*/
	Type string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetBeneficiariesParams() beforehand.
func (o *GetBeneficiariesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndDate, qhkEndDate, _ := qs.GetOK("endDate")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qProgramID, qhkProgramID, _ := qs.GetOK("programId")
	if err := o.bindProgramID(qProgramID, qhkProgramID, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("startDate")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *GetBeneficiariesParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("endDate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("endDate", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("endDate", "query", "strfmt.Date", raw)
	}
	o.EndDate = *(value.(*strfmt.Date))

	if err := o.validateEndDate(formats); err != nil {
		return err
	}

	return nil
}

// validateEndDate carries on validations for parameter EndDate
func (o *GetBeneficiariesParams) validateEndDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("endDate", "query", "date", o.EndDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindProgramID binds and validates parameter ProgramID from query.
func (o *GetBeneficiariesParams) bindProgramID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("programId", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("programId", "query", raw); err != nil {
		return err
	}

	o.ProgramID = raw

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *GetBeneficiariesParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("startDate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("startDate", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("startDate", "query", "strfmt.Date", raw)
	}
	o.StartDate = *(value.(*strfmt.Date))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *GetBeneficiariesParams) validateStartDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("startDate", "query", "date", o.StartDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindType binds and validates parameter Type from query.
func (o *GetBeneficiariesParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("type", "query", raw); err != nil {
		return err
	}

	o.Type = raw

	if err := o.validateType(formats); err != nil {
		return err
	}

	return nil
}

// validateType carries on validations for parameter Type
func (o *GetBeneficiariesParams) validateType(formats strfmt.Registry) error {

	if err := validate.EnumCase("type", "query", o.Type, []interface{}{"CERTIFIED", "OPEN_APPOINTMENT", "ALL"}, true); err != nil {
		return err
	}

	return nil
}
