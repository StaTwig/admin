// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// CreateNewBeneficiaryOKCode is the HTTP code returned for type CreateNewBeneficiaryOK
const CreateNewBeneficiaryOKCode int = 200

/*CreateNewBeneficiaryOK OK

swagger:response createNewBeneficiaryOK
*/
type CreateNewBeneficiaryOK struct {

	/*
	  In: Body
	*/
	Payload *CreateNewBeneficiaryOKBody `json:"body,omitempty"`
}

// NewCreateNewBeneficiaryOK creates CreateNewBeneficiaryOK with default headers values
func NewCreateNewBeneficiaryOK() *CreateNewBeneficiaryOK {

	return &CreateNewBeneficiaryOK{}
}

// WithPayload adds the payload to the create new beneficiary o k response
func (o *CreateNewBeneficiaryOK) WithPayload(payload *CreateNewBeneficiaryOKBody) *CreateNewBeneficiaryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create new beneficiary o k response
func (o *CreateNewBeneficiaryOK) SetPayload(payload *CreateNewBeneficiaryOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNewBeneficiaryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateNewBeneficiaryBadRequestCode is the HTTP code returned for type CreateNewBeneficiaryBadRequest
const CreateNewBeneficiaryBadRequestCode int = 400

/*CreateNewBeneficiaryBadRequest Bad Request

swagger:response createNewBeneficiaryBadRequest
*/
type CreateNewBeneficiaryBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateNewBeneficiaryBadRequest creates CreateNewBeneficiaryBadRequest with default headers values
func NewCreateNewBeneficiaryBadRequest() *CreateNewBeneficiaryBadRequest {

	return &CreateNewBeneficiaryBadRequest{}
}

// WithPayload adds the payload to the create new beneficiary bad request response
func (o *CreateNewBeneficiaryBadRequest) WithPayload(payload interface{}) *CreateNewBeneficiaryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create new beneficiary bad request response
func (o *CreateNewBeneficiaryBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNewBeneficiaryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// CreateNewBeneficiaryUnauthorizedCode is the HTTP code returned for type CreateNewBeneficiaryUnauthorized
const CreateNewBeneficiaryUnauthorizedCode int = 401

/*CreateNewBeneficiaryUnauthorized Unauthorized

swagger:response createNewBeneficiaryUnauthorized
*/
type CreateNewBeneficiaryUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateNewBeneficiaryUnauthorized creates CreateNewBeneficiaryUnauthorized with default headers values
func NewCreateNewBeneficiaryUnauthorized() *CreateNewBeneficiaryUnauthorized {

	return &CreateNewBeneficiaryUnauthorized{}
}

// WithPayload adds the payload to the create new beneficiary unauthorized response
func (o *CreateNewBeneficiaryUnauthorized) WithPayload(payload interface{}) *CreateNewBeneficiaryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create new beneficiary unauthorized response
func (o *CreateNewBeneficiaryUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNewBeneficiaryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
