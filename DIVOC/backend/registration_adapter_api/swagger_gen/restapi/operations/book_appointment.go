// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BookAppointmentHandlerFunc turns a function with the right signature into a book appointment handler
type BookAppointmentHandlerFunc func(BookAppointmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookAppointmentHandlerFunc) Handle(params BookAppointmentParams) middleware.Responder {
	return fn(params)
}

// BookAppointmentHandler interface for that can handle valid book appointment params
type BookAppointmentHandler interface {
	Handle(BookAppointmentParams) middleware.Responder
}

// NewBookAppointment creates a new http.Handler for the book appointment operation
func NewBookAppointment(ctx *middleware.Context, handler BookAppointmentHandler) *BookAppointment {
	return &BookAppointment{Context: ctx, Handler: handler}
}

/*BookAppointment swagger:route POST /appointment/schedule bookAppointment

book an appointment

*/
type BookAppointment struct {
	Context *middleware.Context
	Handler BookAppointmentHandler
}

func (o *BookAppointment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookAppointmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// BookAppointmentBody book appointment body
//
// swagger:model BookAppointmentBody
type BookAppointmentBody struct {

	// beneficiaries
	// Required: true
	Beneficiaries []string `json:"beneficiaries"`

	// center id
	// Required: true
	CenterID *string `json:"center_id"`

	// date
	// Required: true
	Date *string `json:"date"`

	// slot id
	// Required: true
	SlotID *string `json:"slot_id"`
}

// Validate validates this book appointment body
func (o *BookAppointmentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBeneficiaries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlotID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BookAppointmentBody) validateBeneficiaries(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"beneficiaries", "body", o.Beneficiaries); err != nil {
		return err
	}

	return nil
}

func (o *BookAppointmentBody) validateCenterID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"center_id", "body", o.CenterID); err != nil {
		return err
	}

	return nil
}

func (o *BookAppointmentBody) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"date", "body", o.Date); err != nil {
		return err
	}

	return nil
}

func (o *BookAppointmentBody) validateSlotID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"slot_id", "body", o.SlotID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BookAppointmentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BookAppointmentBody) UnmarshalBinary(b []byte) error {
	var res BookAppointmentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
