// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetBeneficiariesHandlerFunc turns a function with the right signature into a get beneficiaries handler
type GetBeneficiariesHandlerFunc func(GetBeneficiariesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBeneficiariesHandlerFunc) Handle(params GetBeneficiariesParams) middleware.Responder {
	return fn(params)
}

// GetBeneficiariesHandler interface for that can handle valid get beneficiaries params
type GetBeneficiariesHandler interface {
	Handle(GetBeneficiariesParams) middleware.Responder
}

// NewGetBeneficiaries creates a new http.Handler for the get beneficiaries operation
func NewGetBeneficiaries(ctx *middleware.Context, handler GetBeneficiariesHandler) *GetBeneficiaries {
	return &GetBeneficiaries{Context: ctx, Handler: handler}
}

/*GetBeneficiaries swagger:route GET /registration/beneficiaries getBeneficiaries

Get benficiary details

*/
type GetBeneficiaries struct {
	Context *middleware.Context
	Handler GetBeneficiariesHandler
}

func (o *GetBeneficiaries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBeneficiariesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBeneficiariesOKBodyItems0 get beneficiaries o k body items0
//
// swagger:model GetBeneficiariesOKBodyItems0
type GetBeneficiariesOKBodyItems0 struct {

	// appointment
	Appointment *GetBeneficiariesOKBodyItems0Appointment `json:"appointment,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this get beneficiaries o k body items0
func (o *GetBeneficiariesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppointment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBeneficiariesOKBodyItems0) validateAppointment(formats strfmt.Registry) error {

	if swag.IsZero(o.Appointment) { // not required
		return nil
	}

	if o.Appointment != nil {
		if err := o.Appointment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBeneficiariesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBeneficiariesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetBeneficiariesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBeneficiariesOKBodyItems0Appointment get beneficiaries o k body items0 appointment
//
// swagger:model GetBeneficiariesOKBodyItems0Appointment
type GetBeneficiariesOKBodyItems0Appointment struct {

	// appointment number
	AppointmentNumber string `json:"appointment_number,omitempty"`

	// center id
	CenterID string `json:"center_id,omitempty"`

	// date
	Date string `json:"date,omitempty"`

	// dose number
	DoseNumber string `json:"dose_number,omitempty"`
}

// Validate validates this get beneficiaries o k body items0 appointment
func (o *GetBeneficiariesOKBodyItems0Appointment) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBeneficiariesOKBodyItems0Appointment) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBeneficiariesOKBodyItems0Appointment) UnmarshalBinary(b []byte) error {
	var res GetBeneficiariesOKBodyItems0Appointment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
