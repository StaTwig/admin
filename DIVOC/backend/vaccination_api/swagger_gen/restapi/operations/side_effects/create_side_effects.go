// Code generated by go-swagger; DO NOT EDIT.

package side_effects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/divoc/api/swagger_gen/models"
)

// CreateSideEffectsHandlerFunc turns a function with the right signature into a create side effects handler
type CreateSideEffectsHandlerFunc func(CreateSideEffectsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSideEffectsHandlerFunc) Handle(params CreateSideEffectsParams) middleware.Responder {
	return fn(params)
}

// CreateSideEffectsHandler interface for that can handle valid create side effects params
type CreateSideEffectsHandler interface {
	Handle(CreateSideEffectsParams) middleware.Responder
}

// NewCreateSideEffects creates a new http.Handler for the create side effects operation
func NewCreateSideEffects(ctx *middleware.Context, handler CreateSideEffectsHandler) *CreateSideEffects {
	return &CreateSideEffects{Context: ctx, Handler: handler}
}

/*CreateSideEffects swagger:route POST /sideEffects sideEffects createSideEffects

Post side effects

*/
type CreateSideEffects struct {
	Context *middleware.Context
	Handler CreateSideEffectsHandler
}

func (o *CreateSideEffects) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateSideEffectsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateSideEffectsBody create side effects body
//
// swagger:model CreateSideEffectsBody
type CreateSideEffectsBody struct {

	// side effects
	SideEffects *models.SideEffects `json:"sideEffects,omitempty"`
}

// Validate validates this create side effects body
func (o *CreateSideEffectsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSideEffects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSideEffectsBody) validateSideEffects(formats strfmt.Registry) error {

	if swag.IsZero(o.SideEffects) { // not required
		return nil
	}

	if o.SideEffects != nil {
		if err := o.SideEffects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "sideEffects")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSideEffectsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSideEffectsBody) UnmarshalBinary(b []byte) error {
	var res CreateSideEffectsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
