// Code generated by go-swagger; DO NOT EDIT.

package symptoms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetInstructionsHandlerFunc turns a function with the right signature into a get instructions handler
type GetInstructionsHandlerFunc func(GetInstructionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInstructionsHandlerFunc) Handle(params GetInstructionsParams) middleware.Responder {
	return fn(params)
}

// GetInstructionsHandler interface for that can handle valid get instructions params
type GetInstructionsHandler interface {
	Handle(GetInstructionsParams) middleware.Responder
}

// NewGetInstructions creates a new http.Handler for the get instructions operation
func NewGetInstructions(ctx *middleware.Context, handler GetInstructionsHandler) *GetInstructions {
	return &GetInstructions{Context: ctx, Handler: handler}
}

/*GetInstructions swagger:route GET /instructions symptoms getInstructions

Get symptoms instructions

*/
type GetInstructions struct {
	Context *middleware.Context
	Handler GetInstructionsHandler
}

func (o *GetInstructions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetInstructionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
