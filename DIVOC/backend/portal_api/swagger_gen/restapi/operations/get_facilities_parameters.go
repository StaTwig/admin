// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFacilitiesParams creates a new GetFacilitiesParams object
// no default values defined in spec.
func NewGetFacilitiesParams() GetFacilitiesParams {

	return GetFacilitiesParams{}
}

// GetFacilitiesParams contains all the bound params for the get facilities operation
// typically these are obtained from a http.Request
//
// swagger:parameters getFacilities
type GetFacilitiesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Facility District
	  In: query
	*/
	District *string
	/*
	  In: query
	*/
	Limit *float64
	/*
	  In: query
	*/
	Offset *float64
	/*Program
	  In: query
	*/
	ProgramID *string
	/*Program Status
	  In: query
	*/
	ProgramStatus *string
	/*
	  In: query
	*/
	RateUpdatedFrom *string
	/*
	  In: query
	*/
	RateUpdatedTo *string
	/*Facility State
	  In: query
	*/
	State *string
	/*Facility Type
	  In: query
	*/
	Type *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFacilitiesParams() beforehand.
func (o *GetFacilitiesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDistrict, qhkDistrict, _ := qs.GetOK("district")
	if err := o.bindDistrict(qDistrict, qhkDistrict, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qProgramID, qhkProgramID, _ := qs.GetOK("programId")
	if err := o.bindProgramID(qProgramID, qhkProgramID, route.Formats); err != nil {
		res = append(res, err)
	}

	qProgramStatus, qhkProgramStatus, _ := qs.GetOK("programStatus")
	if err := o.bindProgramStatus(qProgramStatus, qhkProgramStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	qRateUpdatedFrom, qhkRateUpdatedFrom, _ := qs.GetOK("rateUpdatedFrom")
	if err := o.bindRateUpdatedFrom(qRateUpdatedFrom, qhkRateUpdatedFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qRateUpdatedTo, qhkRateUpdatedTo, _ := qs.GetOK("rateUpdatedTo")
	if err := o.bindRateUpdatedTo(qRateUpdatedTo, qhkRateUpdatedTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDistrict binds and validates parameter District from query.
func (o *GetFacilitiesParams) bindDistrict(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.District = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetFacilitiesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "float64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetFacilitiesParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "float64", raw)
	}
	o.Offset = &value

	return nil
}

// bindProgramID binds and validates parameter ProgramID from query.
func (o *GetFacilitiesParams) bindProgramID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ProgramID = &raw

	return nil
}

// bindProgramStatus binds and validates parameter ProgramStatus from query.
func (o *GetFacilitiesParams) bindProgramStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ProgramStatus = &raw

	return nil
}

// bindRateUpdatedFrom binds and validates parameter RateUpdatedFrom from query.
func (o *GetFacilitiesParams) bindRateUpdatedFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RateUpdatedFrom = &raw

	return nil
}

// bindRateUpdatedTo binds and validates parameter RateUpdatedTo from query.
func (o *GetFacilitiesParams) bindRateUpdatedTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RateUpdatedTo = &raw

	return nil
}

// bindState binds and validates parameter State from query.
func (o *GetFacilitiesParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.State = &raw

	return nil
}

// bindType binds and validates parameter Type from query.
func (o *GetFacilitiesParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Type = &raw

	return nil
}
