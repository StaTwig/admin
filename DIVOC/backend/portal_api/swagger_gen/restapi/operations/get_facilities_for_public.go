// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/divoc/portal-api/swagger_gen/models"
)

// GetFacilitiesForPublicHandlerFunc turns a function with the right signature into a get facilities for public handler
type GetFacilitiesForPublicHandlerFunc func(GetFacilitiesForPublicParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFacilitiesForPublicHandlerFunc) Handle(params GetFacilitiesForPublicParams) middleware.Responder {
	return fn(params)
}

// GetFacilitiesForPublicHandler interface for that can handle valid get facilities for public params
type GetFacilitiesForPublicHandler interface {
	Handle(GetFacilitiesForPublicParams) middleware.Responder
}

// NewGetFacilitiesForPublic creates a new http.Handler for the get facilities for public operation
func NewGetFacilitiesForPublic(ctx *middleware.Context, handler GetFacilitiesForPublicHandler) *GetFacilitiesForPublic {
	return &GetFacilitiesForPublic{Context: ctx, Handler: handler}
}

/*GetFacilitiesForPublic swagger:route GET /public/facilities getFacilitiesForPublic

get facilities for public

*/
type GetFacilitiesForPublic struct {
	Context *middleware.Context
	Handler GetFacilitiesForPublicHandler
}

func (o *GetFacilitiesForPublic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFacilitiesForPublicParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFacilitiesForPublicOKBody get facilities for public o k body
//
// swagger:model GetFacilitiesForPublicOKBody
type GetFacilitiesForPublicOKBody struct {

	// facilities
	Facilities []*models.PublicFacility `json:"facilities"`

	// facilities schedule
	FacilitiesSchedule []*models.FacilityProgramSlot `json:"facilitiesSchedule"`
}

// Validate validates this get facilities for public o k body
func (o *GetFacilitiesForPublicOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFacilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFacilitiesSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFacilitiesForPublicOKBody) validateFacilities(formats strfmt.Registry) error {

	if swag.IsZero(o.Facilities) { // not required
		return nil
	}

	for i := 0; i < len(o.Facilities); i++ {
		if swag.IsZero(o.Facilities[i]) { // not required
			continue
		}

		if o.Facilities[i] != nil {
			if err := o.Facilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFacilitiesForPublicOK" + "." + "facilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFacilitiesForPublicOKBody) validateFacilitiesSchedule(formats strfmt.Registry) error {

	if swag.IsZero(o.FacilitiesSchedule) { // not required
		return nil
	}

	for i := 0; i < len(o.FacilitiesSchedule); i++ {
		if swag.IsZero(o.FacilitiesSchedule[i]) { // not required
			continue
		}

		if o.FacilitiesSchedule[i] != nil {
			if err := o.FacilitiesSchedule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFacilitiesForPublicOK" + "." + "facilitiesSchedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFacilitiesForPublicOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFacilitiesForPublicOKBody) UnmarshalBinary(b []byte) error {
	var res GetFacilitiesForPublicOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
