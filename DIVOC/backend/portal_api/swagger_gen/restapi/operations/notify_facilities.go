// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/divoc/portal-api/swagger_gen/models"
)

// NotifyFacilitiesHandlerFunc turns a function with the right signature into a notify facilities handler
type NotifyFacilitiesHandlerFunc func(NotifyFacilitiesParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn NotifyFacilitiesHandlerFunc) Handle(params NotifyFacilitiesParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// NotifyFacilitiesHandler interface for that can handle valid notify facilities params
type NotifyFacilitiesHandler interface {
	Handle(NotifyFacilitiesParams, *models.JWTClaimBody) middleware.Responder
}

// NewNotifyFacilities creates a new http.Handler for the notify facilities operation
func NewNotifyFacilities(ctx *middleware.Context, handler NotifyFacilitiesHandler) *NotifyFacilities {
	return &NotifyFacilities{Context: ctx, Handler: handler}
}

/*NotifyFacilities swagger:route POST /facilities/notify notifyFacilities

notify facilities

*/
type NotifyFacilities struct {
	Context *middleware.Context
	Handler NotifyFacilitiesHandler
}

func (o *NotifyFacilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNotifyFacilitiesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NotifyFacilitiesBody notify facilities body
//
// swagger:model NotifyFacilitiesBody
type NotifyFacilitiesBody struct {

	// facilities
	// Required: true
	// Min Items: 1
	Facilities []string `json:"facilities"`

	// message
	// Required: true
	// Min Length: 5
	Message *string `json:"message"`

	// subject
	Subject string `json:"subject,omitempty"`
}

// Validate validates this notify facilities body
func (o *NotifyFacilitiesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFacilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NotifyFacilitiesBody) validateFacilities(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"facilities", "body", o.Facilities); err != nil {
		return err
	}

	iFacilitiesSize := int64(len(o.Facilities))

	if err := validate.MinItems("body"+"."+"facilities", "body", iFacilitiesSize, 1); err != nil {
		return err
	}

	return nil
}

func (o *NotifyFacilitiesBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"message", "body", string(*o.Message), 5); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NotifyFacilitiesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NotifyFacilitiesBody) UnmarshalBinary(b []byte) error {
	var res NotifyFacilitiesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
