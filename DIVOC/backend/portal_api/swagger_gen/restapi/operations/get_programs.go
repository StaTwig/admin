// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/portal-api/swagger_gen/models"
)

// GetProgramsHandlerFunc turns a function with the right signature into a get programs handler
type GetProgramsHandlerFunc func(GetProgramsParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProgramsHandlerFunc) Handle(params GetProgramsParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// GetProgramsHandler interface for that can handle valid get programs params
type GetProgramsHandler interface {
	Handle(GetProgramsParams, *models.JWTClaimBody) middleware.Responder
}

// NewGetPrograms creates a new http.Handler for the get programs operation
func NewGetPrograms(ctx *middleware.Context, handler GetProgramsHandler) *GetPrograms {
	return &GetPrograms{Context: ctx, Handler: handler}
}

/*GetPrograms swagger:route GET /programs getPrograms

get program list

*/
type GetPrograms struct {
	Context *middleware.Context
	Handler GetProgramsHandler
}

func (o *GetPrograms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProgramsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
