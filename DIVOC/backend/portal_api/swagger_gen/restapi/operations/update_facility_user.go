// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/divoc/portal-api/swagger_gen/models"
)

// UpdateFacilityUserHandlerFunc turns a function with the right signature into a update facility user handler
type UpdateFacilityUserHandlerFunc func(UpdateFacilityUserParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateFacilityUserHandlerFunc) Handle(params UpdateFacilityUserParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// UpdateFacilityUserHandler interface for that can handle valid update facility user params
type UpdateFacilityUserHandler interface {
	Handle(UpdateFacilityUserParams, *models.JWTClaimBody) middleware.Responder
}

// NewUpdateFacilityUser creates a new http.Handler for the update facility user operation
func NewUpdateFacilityUser(ctx *middleware.Context, handler UpdateFacilityUserHandler) *UpdateFacilityUser {
	return &UpdateFacilityUser{Context: ctx, Handler: handler}
}

/*UpdateFacilityUser swagger:route PUT /facility/users updateFacilityUser

Update Facility User

*/
type UpdateFacilityUser struct {
	Context *middleware.Context
	Handler UpdateFacilityUserHandler
}

func (o *UpdateFacilityUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateFacilityUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateFacilityUserBody update facility user body
//
// swagger:model UpdateFacilityUserBody
type UpdateFacilityUserBody struct {
	models.FacilityUser

	// facility code
	FacilityCode string `json:"facilityCode,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateFacilityUserBody) UnmarshalJSON(raw []byte) error {
	// UpdateFacilityUserParamsBodyAO0
	var updateFacilityUserParamsBodyAO0 models.FacilityUser
	if err := swag.ReadJSON(raw, &updateFacilityUserParamsBodyAO0); err != nil {
		return err
	}
	o.FacilityUser = updateFacilityUserParamsBodyAO0

	// UpdateFacilityUserParamsBodyAO1
	var dataUpdateFacilityUserParamsBodyAO1 struct {
		FacilityCode string `json:"facilityCode,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateFacilityUserParamsBodyAO1); err != nil {
		return err
	}

	o.FacilityCode = dataUpdateFacilityUserParamsBodyAO1.FacilityCode

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateFacilityUserBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	updateFacilityUserParamsBodyAO0, err := swag.WriteJSON(o.FacilityUser)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, updateFacilityUserParamsBodyAO0)
	var dataUpdateFacilityUserParamsBodyAO1 struct {
		FacilityCode string `json:"facilityCode,omitempty"`
	}

	dataUpdateFacilityUserParamsBodyAO1.FacilityCode = o.FacilityCode

	jsonDataUpdateFacilityUserParamsBodyAO1, errUpdateFacilityUserParamsBodyAO1 := swag.WriteJSON(dataUpdateFacilityUserParamsBodyAO1)
	if errUpdateFacilityUserParamsBodyAO1 != nil {
		return nil, errUpdateFacilityUserParamsBodyAO1
	}
	_parts = append(_parts, jsonDataUpdateFacilityUserParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update facility user body
func (o *UpdateFacilityUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.FacilityUser
	if err := o.FacilityUser.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateFacilityUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateFacilityUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateFacilityUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
