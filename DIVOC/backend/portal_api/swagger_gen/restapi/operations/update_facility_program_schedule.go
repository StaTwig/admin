// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/divoc/portal-api/swagger_gen/models"
)

// UpdateFacilityProgramScheduleHandlerFunc turns a function with the right signature into a update facility program schedule handler
type UpdateFacilityProgramScheduleHandlerFunc func(UpdateFacilityProgramScheduleParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateFacilityProgramScheduleHandlerFunc) Handle(params UpdateFacilityProgramScheduleParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// UpdateFacilityProgramScheduleHandler interface for that can handle valid update facility program schedule params
type UpdateFacilityProgramScheduleHandler interface {
	Handle(UpdateFacilityProgramScheduleParams, *models.JWTClaimBody) middleware.Responder
}

// NewUpdateFacilityProgramSchedule creates a new http.Handler for the update facility program schedule operation
func NewUpdateFacilityProgramSchedule(ctx *middleware.Context, handler UpdateFacilityProgramScheduleHandler) *UpdateFacilityProgramSchedule {
	return &UpdateFacilityProgramSchedule{Context: ctx, Handler: handler}
}

/*UpdateFacilityProgramSchedule swagger:route PUT /facility/{facilityId}/program/{programId}/schedule updateFacilityProgramSchedule

update schedule for program in facility

*/
type UpdateFacilityProgramSchedule struct {
	Context *middleware.Context
	Handler UpdateFacilityProgramScheduleHandler
}

func (o *UpdateFacilityProgramSchedule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateFacilityProgramScheduleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateFacilityProgramScheduleBody update facility program schedule body
//
// swagger:model UpdateFacilityProgramScheduleBody
type UpdateFacilityProgramScheduleBody struct {

	// appointment schedule
	AppointmentSchedule []*models.FacilityAppointmentSchedule `json:"appointmentSchedule,omitempty"`

	// walk in schedule
	WalkInSchedule []*models.FacilityWalkInSchedule `json:"walkInSchedule,omitempty"`
}

// Validate validates this update facility program schedule body
func (o *UpdateFacilityProgramScheduleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppointmentSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWalkInSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateFacilityProgramScheduleBody) validateAppointmentSchedule(formats strfmt.Registry) error {

	if swag.IsZero(o.AppointmentSchedule) { // not required
		return nil
	}

	for i := 0; i < len(o.AppointmentSchedule); i++ {
		if swag.IsZero(o.AppointmentSchedule[i]) { // not required
			continue
		}

		if o.AppointmentSchedule[i] != nil {
			if err := o.AppointmentSchedule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "appointmentSchedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateFacilityProgramScheduleBody) validateWalkInSchedule(formats strfmt.Registry) error {

	if swag.IsZero(o.WalkInSchedule) { // not required
		return nil
	}

	for i := 0; i < len(o.WalkInSchedule); i++ {
		if swag.IsZero(o.WalkInSchedule[i]) { // not required
			continue
		}

		if o.WalkInSchedule[i] != nil {
			if err := o.WalkInSchedule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "walkInSchedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateFacilityProgramScheduleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateFacilityProgramScheduleBody) UnmarshalBinary(b []byte) error {
	var res UpdateFacilityProgramScheduleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
