// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Program Program
//
// swagger:model Program
type Program struct {

	// Description
	// Required: true
	Description *string `json:"description"`

	// End Date
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// Logo URL
	LogoURL string `json:"logoURL,omitempty"`

	// medicine ids
	MedicineIds []string `json:"medicineIds"`

	// Name
	// Required: true
	Name *string `json:"name"`

	// Start Date
	// Required: true
	// Format: date
	StartDate *strfmt.Date `json:"startDate"`

	// Status
	// Enum: [Active Inactive]
	Status string `json:"status,omitempty"`
}

// Validate validates this program
func (m *Program) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Program) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Program) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Program) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Program) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var programTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		programTypeStatusPropEnum = append(programTypeStatusPropEnum, v)
	}
}

const (

	// ProgramStatusActive captures enum value "Active"
	ProgramStatusActive string = "Active"

	// ProgramStatusInactive captures enum value "Inactive"
	ProgramStatusInactive string = "Inactive"
)

// prop value enum
func (m *Program) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, programTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Program) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Program) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Program) UnmarshalBinary(b []byte) error {
	var res Program
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
