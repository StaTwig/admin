// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vaccinator The Vaccinator Schema
//
// swagger:model Vaccinator
type Vaccinator struct {

	// average rating
	// Required: true
	AverageRating *float64 `json:"averageRating"`

	// code
	// Required: true
	Code *string `json:"code"`

	// vaccinator email
	Email string `json:"email,omitempty"`

	// facility ids
	// Required: true
	FacilityIds []string `json:"facilityIds"`

	// mobile number
	// Required: true
	// Max Length: 10
	// Min Length: 10
	MobileNumber *string `json:"mobileNumber"`

	// Full name
	// Required: true
	Name *string `json:"name"`

	// national identifier
	// Required: true
	NationalIdentifier *string `json:"nationalIdentifier"`

	// programs
	Programs []*VaccinatorProgramsItems0 `json:"programs"`

	// signature string
	SignatureString string `json:"signatureString,omitempty"`

	// signatures
	Signatures []*Signature `json:"signatures"`

	// status
	// Required: true
	// Enum: [Active Inactive]
	Status *string `json:"status"`

	// training certificate
	// Required: true
	TrainingCertificate *string `json:"trainingCertificate"`
}

// Validate validates this vaccinator
func (m *Vaccinator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilityIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNationalIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrograms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainingCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vaccinator) validateAverageRating(formats strfmt.Registry) error {

	if err := validate.Required("averageRating", "body", m.AverageRating); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validateFacilityIds(formats strfmt.Registry) error {

	if err := validate.Required("facilityIds", "body", m.FacilityIds); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validateMobileNumber(formats strfmt.Registry) error {

	if err := validate.Required("mobileNumber", "body", m.MobileNumber); err != nil {
		return err
	}

	if err := validate.MinLength("mobileNumber", "body", string(*m.MobileNumber), 10); err != nil {
		return err
	}

	if err := validate.MaxLength("mobileNumber", "body", string(*m.MobileNumber), 10); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validateNationalIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("nationalIdentifier", "body", m.NationalIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validatePrograms(formats strfmt.Registry) error {

	if swag.IsZero(m.Programs) { // not required
		return nil
	}

	for i := 0; i < len(m.Programs); i++ {
		if swag.IsZero(m.Programs[i]) { // not required
			continue
		}

		if m.Programs[i] != nil {
			if err := m.Programs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("programs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Vaccinator) validateSignatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Signatures) { // not required
		return nil
	}

	for i := 0; i < len(m.Signatures); i++ {
		if swag.IsZero(m.Signatures[i]) { // not required
			continue
		}

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var vaccinatorTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vaccinatorTypeStatusPropEnum = append(vaccinatorTypeStatusPropEnum, v)
	}
}

const (

	// VaccinatorStatusActive captures enum value "Active"
	VaccinatorStatusActive string = "Active"

	// VaccinatorStatusInactive captures enum value "Inactive"
	VaccinatorStatusInactive string = "Inactive"
)

// prop value enum
func (m *Vaccinator) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vaccinatorTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Vaccinator) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Vaccinator) validateTrainingCertificate(formats strfmt.Registry) error {

	if err := validate.Required("trainingCertificate", "body", m.TrainingCertificate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vaccinator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vaccinator) UnmarshalBinary(b []byte) error {
	var res Vaccinator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VaccinatorProgramsItems0 vaccinator programs items0
//
// swagger:model VaccinatorProgramsItems0
type VaccinatorProgramsItems0 struct {

	// if vaccinator has certificate for program
	// Required: true
	Certified *bool `json:"certified"`

	// Id of the program
	ProgramID string `json:"programId,omitempty"`

	// status
	// Enum: [Active Inactive]
	Status string `json:"status,omitempty"`
}

// Validate validates this vaccinator programs items0
func (m *VaccinatorProgramsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaccinatorProgramsItems0) validateCertified(formats strfmt.Registry) error {

	if err := validate.Required("certified", "body", m.Certified); err != nil {
		return err
	}

	return nil
}

var vaccinatorProgramsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vaccinatorProgramsItems0TypeStatusPropEnum = append(vaccinatorProgramsItems0TypeStatusPropEnum, v)
	}
}

const (

	// VaccinatorProgramsItems0StatusActive captures enum value "Active"
	VaccinatorProgramsItems0StatusActive string = "Active"

	// VaccinatorProgramsItems0StatusInactive captures enum value "Inactive"
	VaccinatorProgramsItems0StatusInactive string = "Inactive"
)

// prop value enum
func (m *VaccinatorProgramsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vaccinatorProgramsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VaccinatorProgramsItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaccinatorProgramsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaccinatorProgramsItems0) UnmarshalBinary(b []byte) error {
	var res VaccinatorProgramsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
