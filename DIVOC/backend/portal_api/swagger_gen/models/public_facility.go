// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicFacility public facility
//
// swagger:model PublicFacility
type PublicFacility struct {

	// Address
	Address *Address `json:"address,omitempty"`

	// Average Rating
	//
	// Average Rating of Facility 0 to 5, 0 for no rating.
	AverageRating float64 `json:"averageRating,omitempty"`

	// Category
	// Enum: [GOVT PRIVATE]
	Category string `json:"category,omitempty"`

	// Facility Code
	FacilityCode string `json:"facilityCode,omitempty"`

	// Facility Name
	FacilityName string `json:"facilityName,omitempty"`

	// Geo Location
	GeoLocation string `json:"geoLocation,omitempty"`

	// Operating hours end of day
	OperatingHourEnd string `json:"operatingHourEnd,omitempty"`

	// Operating hours start of day
	OperatingHourStart string `json:"operatingHourStart,omitempty"`

	// Facility uuid
	Osid string `json:"osid,omitempty"`

	// programs
	Programs []*PublicFacilityProgramsItems0 `json:"programs"`

	// Status of Facility
	// Enum: [Active Inactive Blocked]
	Status string `json:"status,omitempty"`

	// Type of Facility
	// Enum: [Fixed location Mobile Both]
	Type string `json:"type,omitempty"`

	// Website URL
	WebsiteURL string `json:"websiteUrl,omitempty"`
}

// Validate validates this public facility
func (m *PublicFacility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrograms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicFacility) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

var publicFacilityTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GOVT","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicFacilityTypeCategoryPropEnum = append(publicFacilityTypeCategoryPropEnum, v)
	}
}

const (

	// PublicFacilityCategoryGOVT captures enum value "GOVT"
	PublicFacilityCategoryGOVT string = "GOVT"

	// PublicFacilityCategoryPRIVATE captures enum value "PRIVATE"
	PublicFacilityCategoryPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *PublicFacility) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicFacilityTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicFacility) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *PublicFacility) validatePrograms(formats strfmt.Registry) error {

	if swag.IsZero(m.Programs) { // not required
		return nil
	}

	for i := 0; i < len(m.Programs); i++ {
		if swag.IsZero(m.Programs[i]) { // not required
			continue
		}

		if m.Programs[i] != nil {
			if err := m.Programs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("programs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var publicFacilityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","Blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicFacilityTypeStatusPropEnum = append(publicFacilityTypeStatusPropEnum, v)
	}
}

const (

	// PublicFacilityStatusActive captures enum value "Active"
	PublicFacilityStatusActive string = "Active"

	// PublicFacilityStatusInactive captures enum value "Inactive"
	PublicFacilityStatusInactive string = "Inactive"

	// PublicFacilityStatusBlocked captures enum value "Blocked"
	PublicFacilityStatusBlocked string = "Blocked"
)

// prop value enum
func (m *PublicFacility) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicFacilityTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicFacility) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var publicFacilityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Fixed location","Mobile","Both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicFacilityTypeTypePropEnum = append(publicFacilityTypeTypePropEnum, v)
	}
}

const (

	// PublicFacilityTypeFixedLocation captures enum value "Fixed location"
	PublicFacilityTypeFixedLocation string = "Fixed location"

	// PublicFacilityTypeMobile captures enum value "Mobile"
	PublicFacilityTypeMobile string = "Mobile"

	// PublicFacilityTypeBoth captures enum value "Both"
	PublicFacilityTypeBoth string = "Both"
)

// prop value enum
func (m *PublicFacility) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicFacilityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicFacility) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicFacility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicFacility) UnmarshalBinary(b []byte) error {
	var res PublicFacility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublicFacilityProgramsItems0 public facility programs items0
//
// swagger:model PublicFacilityProgramsItems0
type PublicFacilityProgramsItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// program Id
	ProgramID string `json:"programId,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// rate updated at
	RateUpdatedAt string `json:"rateUpdatedAt,omitempty"`

	// schedule
	Schedule *PublicFacilityProgramsItems0Schedule `json:"schedule,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status updated at
	StatusUpdatedAt string `json:"statusUpdatedAt,omitempty"`
}

// Validate validates this public facility programs items0
func (m *PublicFacilityProgramsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicFacilityProgramsItems0) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicFacilityProgramsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicFacilityProgramsItems0) UnmarshalBinary(b []byte) error {
	var res PublicFacilityProgramsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublicFacilityProgramsItems0Schedule public facility programs items0 schedule
//
// swagger:model PublicFacilityProgramsItems0Schedule
type PublicFacilityProgramsItems0Schedule struct {

	// days
	Days []string `json:"days"`

	// end time
	EndTime string `json:"endTime,omitempty"`

	// start time
	StartTime string `json:"startTime,omitempty"`
}

// Validate validates this public facility programs items0 schedule
func (m *PublicFacilityProgramsItems0Schedule) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublicFacilityProgramsItems0Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicFacilityProgramsItems0Schedule) UnmarshalBinary(b []byte) error {
	var res PublicFacilityProgramsItems0Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
