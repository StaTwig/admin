#!/usr/bin/env node

"use strict";

const http = require("http");
const { app, Server } = require("../app");
const { MqttConnection } = require("../helpers/mqtt");
const {
  lastTenSensorData,
  getMinMax,
} = require("../helpers/sensorDataCollector");

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const value = parseInt(val, 10);

  if (Number.isNaN(value)) {
    // named pipe
    return val;
  }

  if (value >= 0) {
    // port number
    return value;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || 3002);
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

const io = new Server(server, {
  path: "/shipmentmanagement/api/socket/",
  transports: ["websocket", "polling"],
});

io.on("connection", (socket) => {
  try {
    console.log("connected ====== > ", socket.id);
    socket.on("join", async (shipmentId) => {
      console.log("join ======== > ", shipmentId);
      await socket.join(shipmentId);
      const sensorsData = await lastTenSensorData(shipmentId);
      const minMax = await getMinMax(shipmentId);
      io.to(shipmentId).emit("graphMeta", minMax);
      for (const data of sensorsData) {
        io.to(shipmentId).emit("sensorData", data);
      }
    });
    socket.on("disconnect", () => {
      console.log("disconnected");
    });
  } catch (error) {
    console.log("SOCKET-IO ERROR", error);
  }
});

(async () => {
  await MqttConnection(io);
})();

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      // eslint-disable-next-line no-process-exit
      process.exit(1);
      // eslint-disable-next-line no-unreachable
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      // eslint-disable-next-line no-process-exit
      process.exit(1);
      // eslint-disable-next-line no-unreachable
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${bind} in ${app.get("env")} environment`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
