"use strict";
exports.__esModule = true;
var logger = require("./lib/logzio-nodejs");
var dummyHost = 'mocked-listener.logz.io';
var nockHttpAddress = "https://" + dummyHost + ":8071";
var dummyToken = '123456789';
var dummyPort = "8071";
var parseMessagesArray = ["log", "log2", "log3"];
const sinon = require('sinon');

var context = {
    log: function () { },
    done: function () { },
    err: function () { }
};
function getCallBackFunction(context) {
    return function callback(err, bulk) {
        if (err) {
            context.err("logzio-logger error: " + err, err);
        }
        context.done();
    };
}
var callBackFunction = getCallBackFunction(context);
var logzioShipper = logger.createLogger({
    token: 'VRumDxNPhJyNAHmAZXnqJKPqDuGJVesn',
    host: "listener.logz.io",
    type: 'eventHub',
    protocol: 'https',
    internalLogger: context,
    compress: true,
    debug: true,
    callback: callBackFunction,
    port: "8071",
    addTimestampWithNanoSecs: true
});
var i = 1;
var time_list = [];
var gettimestamp, nanotime, sent = false;
do {
    var msg = "count log # " + i;
    logzioShipper.log(msg, { roni: 10 });
    i++;
} while (i < 2);
console.log(logzioShipper);

// var clock = sinon.useFakeTimers({
//     now: Date.now()*1000 +999999,
//     toFake: ["hrtime"]
// })
// console.log("clock.now: ", clock.now)
// const time = process.hrtime();
// console.log("hrtime (nanosec:)", time[1])
// // logzioShipper.log({
//     message: "roni"
// });
// logzioShipper.push
// console.log(logzioShipper)

